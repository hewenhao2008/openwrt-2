<sect>Routed Mode and Proxy Configuration

<sect1>Section &lsqb;RoutedMode&rsqb;
<label id="routed">
<p>
Call signaling messages may be passed in two ways:
The first method is Direct Endpoint Call Signaling, in which case
the call signaling messages are passed directly between the endpoints.
The second method is Gatekeeper Routed Call Signaling. With this method,
the call signaling messages are routed through the gatekeeper.
The choice of which methods is used is made in the gatekeeper configuration.

When Gatekeeper Routed call signaling is used, the gatekeeper may choose
whether to route the H.245 control channel and media channels.

<descrip>
<tag/Case I./
The gatekeeper doesn't route them.
The H.245 control channel and media channels are established directly
between the endpoints.
<tag/Case II./
The H.245 control channel is routed through the gatekeeper, while the media channels
are established directly between the endpoints.
<tag/Case III./
The gatekeeper routes the H.245 control channel,
as well as all media channels, including RTP/RTCP for audio and video,
and T.120 channel for data. In this case, no traffic is passed
directly between the endpoints. This is usually called an H.323 Proxy,
which can be regarded as an H.323-H.323 gateway.
</descrip>

This section defines the gatekeeper routed mode options (case I &amp; II).
The proxy feature is defined in the <ref id="proxy" name="next section">.
All settings in this section are affected by reloading the configuration at runtime.

<itemize>
<item><tt/GKRouted=1/<newline>
Default: <tt/0/<newline>
<p>
Whether to enable the gatekeeper routed signaling mode.

<item><tt/H245Routed=1/<newline>
Default: <tt/0/<newline>
<p>
Whether to route the H.245 control channel through the gatekeeper too.
Only takes effect if <tt/GKRouted=1/ and H.245 tunneling is disabled
for a call. Even when this option is disabled, if Proxy or ProxyForNAT
takes effect, an H.245 channel is always routed through the gatekeeper
for calls being proxied.

<item><tt/CallSignalPort=0/<newline>
Default: <tt/1721/<newline>
<p>
The port of call signaling for the gatekeeper.
The default port is <tt/1721/. We don't use the well-known port <tt/1720/ by default
so you can run an H.323 endpoint or gateway in the same machine as the gatekeeper.
You may set it to <tt/0/ to let the gatekeeper choose an arbitrary port.

<item><tt/CallSignalHandlerNumber=10/<newline>
Default: <tt/5/<newline>
<p>
The number of threads dedicated to handle signaling/H.245 channels (between 1-200).
You may increase this number in a heavy loaded gatekeeper. Each thread
can process one signaling message at time, so increasing this number
will increase call throughput. Under Windows, there exists a default limit
of 64 sockets used by a single signaling thread, so each signaling thread
is able to handle at most 32 calls (with H.245 tunneling enabled).

<item><tt/RtpHandlerNumber=2/<newline>
Default: <tt/1/<newline>
<p>
The number of RTP proxy handling threads. Increase this value only if you
experience problems with RTP delay or jitter on a heavily loaded gatekeeper.
A special care has to be taken on Windows, at RTP handling threads are subject
of the same limit of 64 sockets as signaling threads. Each RTP thread is
able to handle at most 32 proxied calls (2 sockets per call).

<item><tt/AcceptNeighborsCalls=1/<newline>
Default: <tt/1/<newline>
<p>
With this feature enabled, the call signaling thread will accept calls
without a pre-existing CallRec found in the CallTable, provided an endpoint
corresponding to the destinationAddress in Setup can be found in the
RegistrationTable, and the calling party is its neighbors or parent GK.
The gatekeeper will also use it's own call signaling address in LCF
in responding to an LRQ. That means, the call signaling will be routed
to GK2 in GK-GK calls.
As a result, the CDRs in GK2 can correctly show the connected
time, instead of 'unconnected'.

<item><tt/AcceptUnregisteredCalls=1/<newline>
Default: <tt/0/<newline>
<p>
With this feature enabled, the gatekeeper will accept calls
from any unregistered endpoint.
However, it raises security risks. Be careful to use it.

<item><tt/RemoveH245AddressOnTunneling=1/<newline>
Default: <tt/0/<newline>
<p>
Some endpoints send h245Address in the UUIE of Q.931 even when h245Tunneling
is set to TRUE. This may cause interoperability problems. If the option
is TRUE, the gatekeeper will remove h245Address when h245Tunneling flag
is TRUE. This enforces the remote party to stay in tunneling mode.

<item><tt/RemoveCallOnDRQ=0/<newline>
Default: <tt/1/<newline>
<p>
With this option turning off, the gatekeeper will not disconnect a call
if it receives a DRQ for it. This avoids potential race conditions when
a DRQ overtakes a Release Complete.
This is only meaningful in routed mode because in direct mode, the only
mechanism to signal end-of-call is a DRQ.
When using call failover this must be set to 0.

<item><tt/DropCallsByReleaseComplete=1/<newline>
Default: <tt/0/<newline>
<p>
According to Recommendation H.323, the gatekeeper could tear down a call
by sending RAS DisengageRequest to endpoints.
However, some bad endpoints just ignore this command.
With this option turning on, the gatekeeper will send Q.931
Release Complete instead of RAS DRQ to both endpoints to force them
drop the call.

<item><tt/SendReleaseCompleteOnDRQ=1/<newline>
Default: <tt/0/<newline>
<p>
On hangup, the endpoint sends both Release Complete within H.225/Q.931 and
DRQ within RAS. It may happen that DRQ is processed first, causing the
gatekeeper to close the call signaling channel, thus preventing the
Release Complete from being forwarding to the other endpoint.
Though the gatekeeper closes the TCP channel to the destination,
some endpoints (e.g. Cisco CallManager) don't drop the call even if
the call signaling channel is closed.
This results in phones that keep ringing if the caller hangs up
before the callee pickups.
Setting this parameter to <tt/1/ makes the gatekeeper always send
Release Complete to both endpoints before closing the call when
it receives DRQ from one of the parties.

<item><tt/SupportNATedEndpoints=1/<newline>
Default: <tt/0/<newline>
<p>
Whether to allow an endpoint behind an NAT box register to the gatekeeper.
If yes, the gatekeeper will translate the IP address in Q.931 and H.245
channel into the IP of NAT box.

GnuGk supports NAT outbound calls (from an endpoint behind NAT
to public networks) directly without any necessary modification
of endpoints or NAT box. Just register the endpoint with the GnuGk
and you can make call now. 

<item><tt/SupportCallingNATedEndpoints=0/<newline>
Default: <tt/1/<newline>
<p>
Whether to allow an endpoint behind an NAT box that support GnuGk Nat Traversal
technique to receive calls. Use this to block errant gateways that do not support
GnuGk Nat Traversal technique properly from causing one way audio problems when 
trying to call to the gateway. Calls to the gateways return caller unreachable.
To be effective SupportNATedEndpoints must be set to 1.

<item><tt/TreatUnregisteredNAT=1/<newline>
Default: <tt/0/<newline>
<p>
Used in conjunction with AcceptUnregisteredCalls and SupportNATedEndpoints will
automatically treat all unregistered calls which cannot be determined as
being NAT are treated as being NAT. 

Not all Endpoints send sourceSignalAddress in the setup message which can
be used to determine whether a caller is NAT. This adds support to those that 
don't.

<item><tt/ScreenDisplayIE=MyID/<newline>
Default: <tt>N/A</tt><newline>
<p>
Modify the DisplayIE of Q.931 to the specified value.

<item><tt/ScreenCallingPartyNumberIE=0965123456/<newline>
Default: <tt>N/A</tt><newline>
<p>
Modify the CallingPartyNumberIE of Q.931 to the specified value.

<item><tt/ScreenSourceAddress=MyID/<newline>
Default: <tt>N/A</tt><newline>
<p>
Modify the sourceAddress field of UUIE element from Q.931 Setup message.

<item><tt/ForwardOnFacility=1/<newline>
Default: <tt/0/<newline>
<p>
If yes, on receiving Q.931 Facility with reason <bf/callForwarded/,
the gatekeeper will forwards call Setup directly to the forwarded endpoint,
instead of passing the message back to the caller.
If you have broken endpoints that can't handle Q.931 Facility with reason
<bf/callForwarded/, turn on this option. Note that this feature
may not always work correctly, as it does not provide any means
of capability renegotiation and media channel reopening.

<item><tt/ShowForwarderNumber=0/<newline>
Default: <tt/0/<newline>
<p>
Whether to rewrite the calling party number to the number of forwarder.
It's usually used for billing purpose.
Only valid if <tt/ForwardOnFacility=1/.

<item><tt/Q931PortRange=20000-20999/<newline>
Default: <tt>N/A (let the OS allocate ports)</tt><newline>
<p>
Specify the range of TCP port number for Q.931 signaling channels.
Note the range size may limit the number of concurrent calls.
Make sure this range is wide enough to take into account TIME_WAIT
TCP socket timeout before a socket can be reused after closed.
TIME_WAIT may vary from 15 seconds to a few minutes, depending on an OS.
So if for example your range is 2000-2001 and you made two calls, the next two calls can be
made after TIME_WAIT timeout elapses and the sockets can be reused.
The same applies to <tt/H245PortRange/ and <tt/T120PortRange/. TIME_WAIT
can be usually tuned down on most OSes.

<item><tt/H245PortRange=30000-30999/<newline>
Default: <tt>N/A (let the OS allocate ports)</tt><newline>
<p>
Specify the range of TCP port number for H.245 control channels.
Note the range size may limit the number of concurrent calls.
See remarks about TIME_WAIT socket state timeout in the <tt/Q931PortRange/
description.

<item><tt/SetupTimeout=4000/<newline>
Default: <tt>8000</tt><newline>
<p>
A timeout value (in milliseconds) to wait for a first message (Setup)
to be received after a signaling TCP channel has been opened.

<item><tt/SignalTimeout=10000/<newline>
Default: <tt>30000</tt><newline>
<p>
A timeout value (in milliseconds) to wait for a signaling channel
to be opened after an ACF message is sent or to wait for an Alerting
message after a signaling channel has been opened. This option
can be thought as a maximum allowed PDD (Post Dial Delay) value.

<item><tt/AlertingTimeout=60000/<newline>
Default: <tt>180000</tt><newline>
<p>
A timeout value (in milliseconds) to wait for a Connect message
after a call entered Alerting state. This option can be thought
as a maximum "ringing time".

<item><tt/TcpKeepAlive=0/<newline>
Default: <tt/1/<newline>
<p>
Enable/disable keepalive feature on TCP signaling sockets. This can
help to detect inactive signaling channels and prevent dead calls from hanging
in the call table. For this option to work, you also need to tweak system
settings to adjust keep alive timeout. See docs/keepalive.txt for more details.

<item><tt/TranslateFacility=1/<newline>
Default: <tt/0/<newline>
<p>
Enable this option if you have interoperability problems between H.323v4
and non-H.323v4 endpoints. It converts Facility messages with reason = transportedInformation
into Facility messages with an empty body, because some endpoints do not
process tunneled H.245 messages inside Facility, if the body is not empty.
The conversion is performed only when necessary - if both endpoints are v4
or both endpoints are pre-v4, nothing is changed.

<item><tt/SocketCleanupTimeout=1000/<newline>
Default: <tt/5000/<newline>
<p>
Define time to wait before an unused socket is closed (if it is not yet closed)
and deleted (its memory is released). If you use very small port ranges, like 
a few ports (e.g. RTPPortRange=2000-2009), you may want to decrease this value
to get sockets reusable faster.

<item><tt/ActivateFailover=1/<newline>
Default: <tt/0/<newline>
<p>
Activate call failover: When activated, GnuGk will try to find
other possible routes to a destination if the call fails on the
first route. The list of routes for a call is built when the call
first comes in and currently not all routing policies are able to
provide multiple routes.
You can use the 'internal' and the 'sql' policy to provide multiple routes.
In addition to that multiple routes can be set by SQL and Radius authenticators.

For accounting of calls using failover, see the SingleFailoverCDR
switch in the <ref id="calltable" name="[CallTable]"> section.

<item><tt/FailoverCauses=1-15,21-127/<newline>
Default: <tt/1-15,21-127/<newline>
<p>
Define which cause codes in a ReleaseComplete will trigger
call failover.

<item><tt/DisableRetryChecks=1/<newline>
Default: <tt/0/<newline>
<p>
This will disable all checks if a failed call has already received
FastStart or H.245 messages. Caution: Using this switch enables you
to retry more calls, but you run the risk that some of the retried
calls will fail because the caller is already in a state where he
can't talkt to a new partner.

<item><tt/CalledTypeOfNumber=1/<newline>
Default: <tt>N/A</tt><newline>
<p>
Sets Called-Party-Number type of number to the specified value
for all calls
(0 - UnknownType, 1 - InternationalType, 2 - NationalType,
3 - NetworkSpecificType, 4 - SubscriberType, 6 - AbbreviatedType, 7 - ReservedType).

<item><tt/CallingTypeOfNumber=1/<newline>
Default: <tt>N/A</tt><newline>
<p>
Sets Calling-Party-Number type of number to the specified value
for all calls
(0 - UnknownType, 1 - InternationalType, 2 - NationalType,
3 - NetworkSpecificType, 4 - SubscriberType, 6 - AbbreviatedType, 7 - ReservedType).

<item><tt/CalledPlanOfNumber=1/<newline>
Default: <tt>N/A</tt><newline>
<p>
Sets Called-Numbering-Plan of number to the specified value
(0 - UnknownType, 1 - ISDN, 3 - X.121 numbering, 4 - Telex, 8 - National standard, 9 - private numbering).

<item><tt/CallingPlanOfNumber=1/<newline>
Default: <tt>N/A</tt><newline>
<p>
Sets Calling-Numbering-Plan of number to the specified value
(0 - UnknownType, 1 - ISDN, 3 - X.121 numbering, 4 - Telex, 8 - National standard, 9 - private numbering).

<item><tt/ENUMservers=e164.org,e164.arpa/<newline>
Default: <tt>N/A</tt><newline>
<p>
Sets the eum server list in priority order seperated by (,) for the enum policy. 
This overrides the PWLIB_ENUM_PATH environmental variable.

<item><tt/RDSservers=myvirtualhost.com/<newline>
Default: <tt>N/A</tt><newline>
<p>
Use this to set RDS server to query for rds routing policy. 
This set the domains to use to resolve URI's which do not have SRV records and 
maybe virtually hosted or SRV records are stored in another host.
This overrides the PWLIB_RDS_PATH environmental variable.

<item><tt/CpsLimit=10/<newline>
Default: <tt>0</tt><newline>
<p>
Limit the rate of incomming calls to n calls per second. If more calls are received they are
rejected on TCP level without H.323 error messages and they won't show up in CDRs.
A value of zero (default) disables the feature.
<p>
The limit only applies if the calls in the check interval are greater than check-interval * CPS-rate. This allows small call spikes on a machine without much load, but will apply strict limits when the overall load is high.
<p>
This feature is meant to shield the gatekeeper from overload and to avoid as much resource usage a possible in an overload situation.
<p>
Currently the calls are blocked when the first message comes in on the signalling port. This makes it
very effective for unregistered calls. But so far ARQs are not blocked, so it will be less effective with
registered calls.

<item><tt/CpsCheckInterval=1/<newline>
Default: <tt>5</tt><newline>
<p>
Define the check interval in seconds before the CpsLimit is applied.

<item><tt/GenerateCallProceeding=1/<newline>
Default: <tt>0</tt><newline>
<p>
When set, GnuGk will generate a CallProceeding for each Setup message it receives.
This can be helpfull to avoid a timeout in calling endpoints if the destination takes
a long time to answer or the call is processed in a virtual queue. Without setting
UseProvisionalRespToH245Tunneling=1 this will disable H.245 tunneling.
<p>
CallProceeding messages sent by endpoints or gateways will be translated into Facility
or Progress messages.

<item><tt/UseProvisionalRespToH245Tunneling=1/<newline>
Default: <tt>0</tt><newline>
<p>
WARNING: This is an experimental feature and not tested very well.
<p>
If you only use H.323 equipment that supports provisionalRespToH245Tunneling,
you can set this switch to keep H.245 tunneling enabled when using gatekeeper
generated CallProceeding.

<item><tt/EnableH450.2=1/<newline>
Default: <tt>0</tt><newline>
<p>
When set, GnuGk will intercept H.450.2 call transfer messages and if possible transfer 
the call on behalf of the endpoint. This allows the endpoint initiated transfering of
calls where the remote endpoint may not support H.450 and the gatekeeper initiates the 
call transfer.  

<item><tt/TranslateReceivedQ931Cause=17:=34/<newline>
Default: <tt>N/A</tt><newline>
<p>
Translate all received cause codes in ReleaseComplete messages.
In the above example code 17 (User busy) will be translated into cause code 34 (No circuit/channel available).

<item><tt/TranslateSentQ931Cause=21:=34,27:=34/<newline>
Default: <tt>N/A</tt><newline>
<p>
Translate all cause codes in ReleaseComplete messages sent out.
In the above example code 21 and 27 will be translated into cause code 34, because this particular gateway might deal with error code 34 better than with others.

<item><tt/RemoveH235Call=1/<newline>
Default: <tt>0</tt><newline>
<p>
For compatibility with endpoints which do not support large Setup messages,
this switch removes tokens and cryptoTokens from Setups to make them smaller.

<item><tt/RemoveH460Call=1/<newline>
Default: <tt>0</tt><newline>
<p>
For compatibility with pre-H323v4 devices that do not support H.460,
this switch strips the H.460 feature advertisements from the Setup PDU.
Usually they should be ignored anyway; use this switch if they cause trouble.

<item><tt/ForceNATKeepAlive=1/<newline>
Default: <tt>0</tt><newline>
<p>
Force ALL registrations to use a keepAlive TCP socket.

<item><tt/EnableH46018=1/<newline>
Default: <tt>0</tt><newline>
<p>
Enable support for H.460.18 and H.460.19. This feature is covered by patents held by Tandberg.
If you don't use the official releases by the GNU Gatekeeper Project, make sure you have a
valid license before enabling it.

</itemize>

<p>
<sect1>Section &lsqb;Proxy&rsqb;
<label id="proxy">
<p>
The section defines the H.323 proxy features. It means the gatekeeper will
route all the traffic between the calling and called endpoints, so there
is no traffic between the two endpoints directly. Thus it is very useful
if you have some endpoints using private IP behind an NAT box and some
endpoints using public IP outside the box.

The gatekeeper can do proxy for logical channels of RTP/RTCP (audio and video)
and T.120 (data). Logical channels opened by fast-connect procedures
or H.245 tunneling are also supported.

Note to make proxy work, the gatekeeper must have <bf/direct connection/
to both networks of the caller and callee.

<itemize>
<item><tt/Enable=1/<newline>
Default: <tt/0/<newline>
<p>
Whether to enable the proxy function. You have to enable gatekeeper
routed mode first (see the <ref id="routed" name="previous section">).
You don't have to specify H.245 routed.
It will automatically be used if required.

<item><tt>InternalNetwork=10.0.1.0/24</tt><newline>
Default: <tt>N/A</tt><newline>
<p>
Define the networks behind the proxy. Multiple internal networks are allowed.
The proxy route channels only the communications between one endpoint
in the internal network and one external. If you don't specify it, all calls
will be proxied. If using GnuGk behind a NAT and the [Gatekeeper::Main] ExternalIP
is set then there is not requirement to set this as it is auto-detected at startup. 
Using this setting will simply override the default detected settings. 

<descrip>
<tag/Format:/
<tt>InternalNetwork=network address/netmask[,network address/netmask,...]</tt>
<p>
The netmask can be expressed in decimal dot notation or
CIDR notation (prefix length), as shown in the example.
<tag/Example:/
<tt>InternalNetwork=10.0.0.0/255.0.0.0,192.168.0.0/24</tt>
</descrip>

<item><tt/ProxyAlways=1/<newline>
Default: <tt/0/<newline>
<p>
Always proxy all calls regardles of other settings.

<item><tt/T120PortRange=40000-40999/<newline>
Default: <tt>N/A (let the OS allocate ports)</tt><newline>
<p>
Specify the range of TCP port number for T.120 data channels.
Note the range size may limit the number of concurrent calls.
See remarks about TIME_WAIT socket state timeout in the <tt/Q931PortRange/
description.

<item><tt/RTPPortRange=50000-59999/<newline>
Default: <tt>1024-65535</tt><newline>
<p>
Specify the range of UDP port number for RTP/RTCP channels. Since RTP streams require two sockets, the range has to contain an even number of ports.
Note that the range size may limit the number of possible concurrent calls.

<item><tt/ProxyForNAT=1/<newline>
Default: <tt/1/<newline>
<p>
If yes, the gatekeeper will proxy for calls to which one of the endpoints
participated is behind an NAT box. This ensure the RTP/RTCP stream can
penetrate into the NAT box without modifying it.
However, the endpoint behind the NAT box must use the same port
to send and receive RTP/RTCP stream.
If you have bad or broken endpoints that don't satisfy the precondition,
you have better to disable this feature and let the NAT box forward
RTP/RTCP stream for you.

<item><tt/ProxyForSameNAT=0/<newline>
Default: <tt/0/<newline>
<p>
Whether to proxy for calls between endpoints from the same NAT box.
You do not need to enable this feature in general, since usually endpoints
from the same NAT box can communicate with each other.

<item><tt/STUNserver=stun.mydomain.com/<newline>
Default: <tt>N/A</tt><newline>
<p>
Used with P2Pnat Media. This set the public STUN (RFC3489) server for the
P2Pnat Media to determine what type of NAT the endpoint is behind. This 
address is sent to the endpoint once it has been detected behind a NAT. You
can download an open source STUN server from http://sourceforge.net/projects/stun/


<item><tt/LocalProxyOptimize=1/<newline>
Default: <tt/0/<newline>
<p>
Used with P2Pnat Media. When using GnuGk to connect endpoints on a local LAN 
to the public internet ie GnuGk behind (or on) a router. You can use this
setting to allow (where possible) your local LAN endpoints to send media 
directly to other endpoints on the public internet without requiring the 
media to always to be proxied through the gatekeeper.


<item><tt/DisableH235Call=1/<newline>
Default: <tt/0/<newline>
<p>
This setting removes the cryptoTokens and clearTokens off the Setup message.
Use this when working with IP phones that do not support large Setup messages

<item><tt/DisableH460Call=1/<newline>
Default: <tt/0/<newline>
<p>
This setting removes the H.460 features from the Setup message. Use this with
pre-H.323v4 endpoints and gateways which cannot decode these messages.

<item><tt/EnableRTPMute=1/<newline>
Default: <tt/0/<newline>
<p>
This setting allows either call party in media proxy mode to mute the 
audio/video by sending a * as either string or tone.userinput. The sending 
of * mutes the audio/video and a subsequent send of * unmutes the 
audio/video. Only the party who muted the call can unmute. This is designed 
as a hold function for terminals which do not support H450.4.

<item><tt/RemoveMCInFastStartTransmitOffer=1/<newline>
Default: <tt/0/<newline>
<p>
Remove the mediaChannel from fastStart transmit offers.
For unicast transmit channels, mediaChannel should not be sent on offer;
it is responsibility of callee to provide mediaChannel in an answer.

</itemize>

